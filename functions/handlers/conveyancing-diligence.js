const { onRequest } = require("firebase-functions/v2/https");

/**
 * Generate AI-powered legal diligence analysis report
 * This function would integrate with OpenAI GPT-5 to provide legal analysis
 */
const generateDiligenceReport = onRequest(
  {
    cors: true,
    invoker: "public", // Demo access - would be "private" in production
  },
  async (req, res) => {
    try {
      // Only allow POST requests
      if (req.method !== "POST") {
        return res.status(405).json({ error: "Method not allowed" });
      }

      const { stateData, claimsData, analysisType = "legal-diligence" } = req.body;

      if (!stateData) {
        return res.status(400).json({ error: "State data is required" });
      }

      // TODO: Integrate with OpenAI GPT-5 API
      // For now, return a simulated comprehensive legal analysis

      // Analyze the property data for legal risks and issues
      const propertyAnalysis = analyzePropertyData(stateData);
      const claimsAnalysis = analyzeClaimsProvenance(claimsData);

      const report = {
        analysisType,
        timestamp: new Date().toISOString(),
        transactionId: stateData.transactionId || "unknown",

        // Executive Summary
        executiveSummary: generateExecutiveSummary(stateData, propertyAnalysis),

        // Risk Assessment
        riskAssessment: {
          overallRisk: calculateOverallRisk(propertyAnalysis),
          riskFactors: identifyRiskFactors(stateData, propertyAnalysis),
          mitigationRecommendations: generateMitigationRecommendations(propertyAnalysis),
        },

        // Legal Analysis
        legalAnalysis: {
          titleAnalysis: analyzeTitleData(stateData.propertyPack),
          planningAnalysis: analyzePlanningData(stateData.planningApplications),
          transactionAnalysis: analyzeTransactionData(stateData.participants),
        },

        // Data Quality Assessment
        dataQuality: {
          completeness: assessDataCompleteness(stateData),
          verification: assessDataVerification(claimsData),
          recommendations: generateDataRecommendations(stateData, claimsData),
        },

        // Provenance Analysis
        provenanceAnalysis: claimsAnalysis,

        // Action Items
        actionItems: generateActionItems(stateData, propertyAnalysis),

        // Disclaimer
        disclaimer: "This analysis is generated by AI for demonstration purposes. Professional legal advice should always be sought for actual conveyancing matters.",
      };

      res.json({
        success: true,
        report,
      });
    } catch (error) {
      console.error("Error generating diligence report:", error);
      res.status(500).json({
        error: "Failed to generate diligence report",
        details: error.message,
      });
    }
  },
);

// Helper functions for legal analysis

function analyzePropertyData(stateData) {
  const analysis = {
    titleIssues: [],
    planningConcerns: [],
    structuralConcerns: [],
    financialConcerns: [],
  };

  // Analyze title information
  if (stateData.propertyPack) {
    const pack = stateData.propertyPack;

    // Check for title issues
    if (!pack.titleNumber) {
      analysis.titleIssues.push("No title number found");
    }

    if (pack.charges && pack.charges.length > 0) {
      analysis.financialConcerns.push(`${pack.charges.length} charges registered against the property`);
    }

    if (pack.restrictions && pack.restrictions.length > 0) {
      analysis.titleIssues.push(`${pack.restrictions.length} restrictions noted on title`);
    }

    if (pack.covenants && pack.covenants.length > 0) {
      analysis.titleIssues.push(`${pack.covenants.length} covenants affect the property`);
    }
  }

  // Analyze planning applications
  if (stateData.planningApplications) {
    stateData.planningApplications.forEach((app) => {
      if (app.status === "REFUSED" || app.status === "WITHDRAWN") {
        analysis.planningConcerns.push(`Planning application ${app.reference} was ${app.status.toLowerCase()}`);
      }
    });
  }

  return analysis;
}

function analyzeClaimsProvenance(claimsData) {
  if (!claimsData || !claimsData.claims) {
    return { dataSourceCount: 0, verificationLevels: [], trustScore: 0 };
  }

  const sources = new Set();
  const verificationLevels = new Set();
  let totalTrustScore = 0;

  claimsData.claims.forEach((claim) => {
    if (claim.verification) {
      sources.add(claim.verification.dataSource);
      verificationLevels.add(claim.verification.evidenceType);
      // Simple trust scoring based on evidence type
      switch (claim.verification.evidenceType) {
        case "official_record":
          totalTrustScore += 10;
          break;
        case "digital_attestation":
          totalTrustScore += 8;
          break;
        case "electronic_record":
          totalTrustScore += 6;
          break;
        default:
          totalTrustScore += 3;
      }
    }
  });

  return {
    dataSourceCount: sources.size,
    uniqueSources: Array.from(sources),
    verificationLevels: Array.from(verificationLevels),
    trustScore: Math.round(totalTrustScore / claimsData.claims.length),
    claimsCount: claimsData.claims.length,
  };
}

function generateExecutiveSummary(stateData, analysis) {
  const summaryPoints = [];

  summaryPoints.push(`Property transaction analysis for ${stateData.propertyPack?.address || "Unknown Address"}`);

  if (analysis.titleIssues.length === 0) {
    summaryPoints.push("No significant title issues identified");
  } else {
    summaryPoints.push(`${analysis.titleIssues.length} potential title issues require review`);
  }

  if (analysis.planningConcerns.length > 0) {
    summaryPoints.push(`${analysis.planningConcerns.length} planning matters noted`);
  }

  if (stateData.participants) {
    summaryPoints.push(`${stateData.participants.length} transaction participants identified and verified`);
  }

  return summaryPoints.join(". ") + ".";
}

function calculateOverallRisk(analysis) {
  let riskScore = 0;

  riskScore += analysis.titleIssues.length * 2;
  riskScore += analysis.planningConcerns.length * 3;
  riskScore += analysis.structuralConcerns.length * 4;
  riskScore += analysis.financialConcerns.length * 3;

  if (riskScore <= 2) return "LOW";
  if (riskScore <= 6) return "MEDIUM";
  return "HIGH";
}

function identifyRiskFactors(stateData, analysis) {
  const risks = [];

  analysis.titleIssues.forEach((issue) => {
    risks.push({ category: "Title", description: issue, severity: "Medium" });
  });

  analysis.planningConcerns.forEach((concern) => {
    risks.push({ category: "Planning", description: concern, severity: "High" });
  });

  analysis.financialConcerns.forEach((concern) => {
    risks.push({ category: "Financial", description: concern, severity: "Medium" });
  });

  return risks;
}

function generateMitigationRecommendations(analysis) {
  const recommendations = [];

  if (analysis.titleIssues.length > 0) {
    recommendations.push("Obtain updated title register and plan from Land Registry");
    recommendations.push("Review all restrictions and covenants with client");
  }

  if (analysis.planningConcerns.length > 0) {
    recommendations.push("Conduct comprehensive planning search");
    recommendations.push("Consider obtaining planning consultant advice");
  }

  if (analysis.financialConcerns.length > 0) {
    recommendations.push("Investigate all registered charges");
    recommendations.push("Confirm discharge arrangements for existing mortgages");
  }

  return recommendations;
}

function analyzeTitleData(propertyPack) {
  if (!propertyPack) return { status: "No title data available" };

  return {
    status: propertyPack.titleNumber ? "Title registered" : "Title status unclear",
    proprietor: propertyPack.registeredProprietor || "Not specified",
    chargesCount: propertyPack.charges?.length || 0,
    restrictionsCount: propertyPack.restrictions?.length || 0,
    covenantsCount: propertyPack.covenants?.length || 0,
  };
}

function analyzePlanningData(planningApplications) {
  if (!planningApplications || planningApplications.length === 0) {
    return { status: "No planning applications found" };
  }

  const statuses = planningApplications.reduce((acc, app) => {
    acc[app.status] = (acc[app.status] || 0) + 1;
    return acc;
  }, {});

  return {
    totalApplications: planningApplications.length,
    statusBreakdown: statuses,
    recentApplications: planningApplications.slice(-3),
  };
}

function analyzeTransactionData(participants) {
  if (!participants) return { status: "No participant data available" };

  const roles = participants.reduce((acc, p) => {
    acc[p.role] = (acc[p.role] || 0) + 1;
    return acc;
  }, {});

  return {
    totalParticipants: participants.length,
    roleBreakdown: roles,
    verificationStatus: "All participants verified via PDTF",
  };
}

function assessDataCompleteness(stateData) {
  let totalFields = 0;
  let populatedFields = 0;

  // Check property pack completeness
  if (stateData.propertyPack) {
    const requiredFields = ["address", "titleNumber", "registeredProprietor", "propertyType", "tenure"];
    requiredFields.forEach((field) => {
      totalFields++;
      if (stateData.propertyPack[field]) populatedFields++;
    });
  }

  // Check participants completeness
  if (stateData.participants) {
    stateData.participants.forEach((p) => {
      const requiredFields = ["firstName", "lastName", "email", "role"];
      requiredFields.forEach((field) => {
        totalFields++;
        if (p[field]) populatedFields++;
      });
    });
  }

  return {
    percentage: totalFields > 0 ? Math.round((populatedFields / totalFields) * 100) : 0,
    populatedFields,
    totalFields,
    missingFields: totalFields - populatedFields,
  };
}

function assessDataVerification(claimsData) {
  if (!claimsData || !claimsData.claims) {
    return { status: "No claims data available for verification assessment" };
  }

  const verifiedClaims = claimsData.claims.filter((claim) =>
    claim.verification && claim.verification.trustFramework === "uk_pdtf",
  );

  return {
    totalClaims: claimsData.claims.length,
    verifiedClaims: verifiedClaims.length,
    verificationRate: Math.round((verifiedClaims.length / claimsData.claims.length) * 100),
    trustFramework: "UK PDTF",
  };
}

function generateDataRecommendations(stateData, claimsData) {
  const recommendations = [];

  const completeness = assessDataCompleteness(stateData);
  if (completeness.percentage < 80) {
    recommendations.push(`Data completeness at ${completeness.percentage}% - consider obtaining additional information`);
  }

  const verification = assessDataVerification(claimsData);
  if (verification.verificationRate < 90) {
    recommendations.push(`Verification rate at ${verification.verificationRate}% - some data may require additional validation`);
  }

  return recommendations;
}

function generateActionItems(stateData, analysis) {
  const actions = [];

  // High priority actions
  if (analysis.titleIssues.length > 0) {
    actions.push({
      priority: "HIGH",
      category: "Title Investigation",
      description: "Review and resolve title issues before completion",
      dueDate: "Before exchange of contracts",
    });
  }

  if (analysis.planningConcerns.length > 0) {
    actions.push({
      priority: "HIGH",
      category: "Planning Matters",
      description: "Investigate planning concerns and advise client",
      dueDate: "Within 5 working days",
    });
  }

  // Standard actions
  actions.push({
    priority: "MEDIUM",
    category: "Searches",
    description: "Complete all standard pre-completion searches",
    dueDate: "Before completion",
  });

  actions.push({
    priority: "LOW",
    category: "Documentation",
    description: "Prepare completion documentation",
    dueDate: "Day of completion",
  });

  return actions;
}

module.exports = {
  generateDiligenceReport,
};
